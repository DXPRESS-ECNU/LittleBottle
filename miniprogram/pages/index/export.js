"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Export = (bottles) => {
    const drawPic = (context, url, quality) => {
        let x = quality[0];
        let y = quality[1];
        let width = quality[2];
        let height = quality[3];
        context.drawImage(url, x, y, width, height);
    };
    const drawText = (context, text, quality) => {
        let x = quality[0];
        let y = quality[1];
        let width = quality[2];
        context.setFontSize(30);
        context.fillText(text, x, y, width);
    };
    const drawAll = (context, bottleUrl) => {
        const bottleHeight = 300;
        const bottleWidth = 200;
        const titleHeight = 100;
        const picWidth = 100;
        context.rect(0, 0, 1300, 4000);
        context.setFillStyle("white");
        context.fill();
        let bottleIndex = 0;
        for (let y = 1; y <= 6; ++y) {
            for (let x = 1; x <= 5; ++x) {
                for (let i = 1; i <= bottles[bottleIndex].full; ++i) {
                    switch (i) {
                        case 1: {
                            drawPic(context, bottles[bottleIndex].path, [50 * x + bottleWidth * (x - 1) + 85, (bottleHeight + 100) * (y - 1) + titleHeight + 195, picWidth, picWidth]);
                            break;
                        }
                        case 2: {
                            drawPic(context, bottles[bottleIndex].path, [50 * x + bottleWidth * (x - 1) + 5, (bottleHeight + 100) * (y - 1) + titleHeight + 150, picWidth, picWidth]);
                            break;
                        }
                        case 3: {
                            drawPic(context, bottles[bottleIndex].path, [50 * x + bottleWidth * (x - 1) + 85, (bottleHeight + 100) * (y - 1) + titleHeight + 95, picWidth, picWidth]);
                            break;
                        }
                        case 4: {
                            drawPic(context, bottles[bottleIndex].path, [50 * x + bottleWidth * (x - 1) + 5, (bottleHeight + 100) * (y - 1) + titleHeight + 50, picWidth, picWidth]);
                            break;
                        }
                        case 5: {
                            drawPic(context, bottles[bottleIndex].path, [50 * x + bottleWidth * (x - 1) + 85, (bottleHeight + 100) * (y - 1) + titleHeight - 5, picWidth, picWidth]);
                            break;
                        }
                    }
                }
                drawPic(context, bottleUrl, [50 * x + bottleWidth * (x - 1), (bottleHeight + 100) * (y - 1) + titleHeight, bottleWidth, bottleHeight]);
                drawText(context, bottles[bottleIndex].name, [50 * x + bottleWidth * (x - 1) + 40, (bottleHeight + 50) * y + 50 * (y - 1) + titleHeight, 150]);
                bottleIndex++;
            }
        }
    };
    const context = wx.createCanvasContext('bottleImg');
    const bottleUrl = "cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/bottle.png";
    wx.cloud.downloadFile({
        fileID: bottleUrl,
        success: res => {
            drawAll(context, res.tempFilePath);
            context.draw(true, function () {
                wx.canvasToTempFilePath({
                    canvasId: "bottleImg",
                    quality: 1,
                    destWidth: 1300,
                    destHeight: 4000,
                    success(res) {
                        wx.saveImageToPhotosAlbum({
                            filePath: res.tempFilePath,
                            success() {
                                console.log("成功保存");
                            },
                            fail(res) {
                                console.log(res.errMsg);
                            }
                        });
                    }
                });
            });
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXhwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQWEsUUFBQSxNQUFNLEdBQUMsQ0FBQyxPQUFjLEVBQVEsRUFBRTtJQUMzQyxNQUFNLE9BQU8sR0FBRyxDQUFDLE9BQXdDLEVBQUUsR0FBVyxFQUFFLE9BQWlCLEVBQVEsRUFBRTtRQUNqRyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbEIsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2xCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN0QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFdkIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFHN0MsQ0FBQyxDQUFBO0lBQ0QsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUF3QyxFQUFFLElBQVksRUFBRSxPQUFpQixFQUFRLEVBQUU7UUFDbkcsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNsQixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdEIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUN2QixPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3JDLENBQUMsQ0FBQTtJQUNELE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBd0MsRUFBRSxTQUFpQixFQUFRLEVBQUU7UUFDcEYsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFBO1FBQ3hCLE1B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QUFBO1lBRWxDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNqQixFQUFFLENBQUMsb0JBQW9CLENBQUM7b0JBQ3RCLFFBQVEsRUFBRSxXQUFXO29CQUNyQixPQUFPLEVBQUUsQ0FBQztvQkFDVixTQUFTLEVBQUUsSUFBSTtvQkFDZixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsT0FBTyxDQUFDLEdBQUc7d0JBQ1QsRUFBRSxDQUFDLHNCQUFzQixDQUFDOzRCQUN4QixRQUFRLEVBQUUsR0FBRyxDQUFDLFlBQVk7NEJBQzFCLE9BQU87Z0NBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTs0QkFDckIsQ0FBQzs0QkFDRCxJQUFJLENBQUMsR0FBRztnQ0FDTixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTs0QkFDekIsQ0FBQzt5QkFDRixDQUFDLENBQUE7b0JBQ0osQ0FBQztpQkFDRixDQUFDLENBQUE7WUFDSixDQUFDLENBQUMsQ0FBQTtRQUdKLENBQUM7S0FDRixDQUFDLENBQUE7QUFDSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRXhwb3J0PShib3R0bGVzOiBhbnlbXSk6IHZvaWQgPT57XHJcbiAgY29uc3QgZHJhd1BpYyA9IChjb250ZXh0OiBXZWNoYXRNaW5pcHJvZ3JhbS5DYW52YXNDb250ZXh0LCB1cmw6IHN0cmluZywgcXVhbGl0eTogbnVtYmVyW10pOiB2b2lkID0+e1xyXG4gICAgbGV0IHggPSBxdWFsaXR5WzBdXHJcbiAgICBsZXQgeSA9IHF1YWxpdHlbMV1cclxuICAgIGxldCB3aWR0aCA9IHF1YWxpdHlbMl1cclxuICAgIGxldCBoZWlnaHQgPSBxdWFsaXR5WzNdXHJcblxyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UodXJsLCB4LCB5LCB3aWR0aCwgaGVpZ2h0KVxyXG4gICAgLy9jb250ZXh0LmRyYXcodHJ1ZSlcclxuXHJcbiAgfVxyXG4gIGNvbnN0IGRyYXdUZXh0ID0gKGNvbnRleHQ6IFdlY2hhdE1pbmlwcm9ncmFtLkNhbnZhc0NvbnRleHQsIHRleHQ6IHN0cmluZywgcXVhbGl0eTogbnVtYmVyW10pOiB2b2lkID0+e1xyXG4gICAgbGV0IHggPSBxdWFsaXR5WzBdXHJcbiAgICBsZXQgeSA9IHF1YWxpdHlbMV1cclxuICAgIGxldCB3aWR0aCA9IHF1YWxpdHlbMl1cclxuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoMzApXHJcbiAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIHgsIHksIHdpZHRoKVxyXG4gIH1cclxuICBjb25zdCBkcmF3QWxsID0gKGNvbnRleHQ6IFdlY2hhdE1pbmlwcm9ncmFtLkNhbnZhc0NvbnRleHQsIGJvdHRsZVVybDogc3RyaW5nKTogdm9pZCA9PntcclxuICAgIGNvbnN0IGJvdHRsZUhlaWdodCA9IDMwMFxyXG4gICAgY29uc3QgYm90dGxlV2lkdGggPSAyMDBcclxuICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gMTAwXHJcbiAgICBjb25zdCBwaWNXaWR0aCA9IDEwMFxyXG5cclxuICAgIC8v55S76IOM5pmvXHJcbiAgICBjb250ZXh0LnJlY3QoMCwgMCwgMTMwMCwgNDAwMClcclxuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKFwid2hpdGVcIilcclxuICAgIGNvbnRleHQuZmlsbCgpXHJcbiAgICAvL2NvbnRleHQuZHJhdygpXHJcbiAgICAvL2NvbnRleHQuc2V0RmlsbFN0eWxlKFwiYmxhY2tcIilcclxuICAgIFxyXG4gICAgbGV0IGJvdHRsZUluZGV4ID0gMFxyXG4gICAgZm9yKGxldCB5ID0gMTsgeSA8PSA2OyArK3kpe1xyXG4gICAgICBmb3IgKGxldCB4ID0gMTsgeCA8PSA1OyArK3gpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBib3R0bGVzW2JvdHRsZUluZGV4XS5mdWxsOyArK2kpe1xyXG4gICAgICAgICAgc3dpdGNoKGkpe1xyXG4gICAgICAgICAgICBjYXNlIDE6e1xyXG4gICAgICAgICAgICAgIGRyYXdQaWMoY29udGV4dCwgYm90dGxlc1tib3R0bGVJbmRleF0ucGF0aCwgWzUwICogeCArIGJvdHRsZVdpZHRoICogKHggLSAxKSArIDg1LCAoYm90dGxlSGVpZ2h0ICsgMTAwKSAqICh5IC0gMSkgKyB0aXRsZUhlaWdodCArIDE5NSwgcGljV2lkdGgsIHBpY1dpZHRoXSlcclxuICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgMjp7XHJcbiAgICAgICAgICAgICAgZHJhd1BpYyhjb250ZXh0LCBib3R0bGVzW2JvdHRsZUluZGV4XS5wYXRoLCBbNTAgKiB4ICsgYm90dGxlV2lkdGggKiAoeCAtIDEpICsgNSwgKGJvdHRsZUhlaWdodCArIDEwMCkgKiAoeSAtIDEpICsgdGl0bGVIZWlnaHQgKyAxNTAsIHBpY1dpZHRoLCBwaWNXaWR0aF0pXHJcbiAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIDM6e1xyXG4gICAgICAgICAgICAgIGRyYXdQaWMoY29udGV4dCwgYm90dGxlc1tib3R0bGVJbmRleF0ucGF0aCwgWzUwICogeCArIGJvdHRsZVdpZHRoICogKHggLSAxKSArIDg1LCAoYm90dGxlSGVpZ2h0ICsgMTAwKSAqICh5IC0gMSkgKyB0aXRsZUhlaWdodCArIDk1LCBwaWNXaWR0aCwgcGljV2lkdGhdKVxyXG4gICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSA0OntcclxuICAgICAgICAgICAgICBkcmF3UGljKGNvbnRleHQsIGJvdHRsZXNbYm90dGxlSW5kZXhdLnBhdGgsIFs1MCAqIHggKyBib3R0bGVXaWR0aCAqICh4IC0gMSkgKyA1LCAoYm90dGxlSGVpZ2h0ICsgMTAwKSAqICh5IC0gMSkgKyB0aXRsZUhlaWdodCArIDUwLCBwaWNXaWR0aCwgcGljV2lkdGhdKVxyXG4gICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSA1OiB7XHJcbiAgICAgICAgICAgICAgZHJhd1BpYyhjb250ZXh0LCBib3R0bGVzW2JvdHRsZUluZGV4XS5wYXRoLCBbNTAgKiB4ICsgYm90dGxlV2lkdGggKiAoeCAtIDEpICsgODUsIChib3R0bGVIZWlnaHQgKyAxMDApICogKHkgLSAxKSArIHRpdGxlSGVpZ2h0LTUsIHBpY1dpZHRoLCBwaWNXaWR0aF0pXHJcbiAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvL+eUu+eTtuWtkFxyXG4gICAgICAgIGRyYXdQaWMoY29udGV4dCwgYm90dGxlVXJsLCBbNTAgKiB4ICsgYm90dGxlV2lkdGggKiAoeCAtIDEpLCAoYm90dGxlSGVpZ2h0ICsgMTAwKSAqICh5IC0gMSkgKyB0aXRsZUhlaWdodCwgYm90dGxlV2lkdGgsIGJvdHRsZUhlaWdodF0pXHJcbiAgICAgICAgZHJhd1RleHQoY29udGV4dCwgYm90dGxlc1tib3R0bGVJbmRleF0ubmFtZSwgWzUwKngrYm90dGxlV2lkdGgqKHgtMSkrNDAsIChib3R0bGVIZWlnaHQrNTApKnkrNTAqKHktMSkrdGl0bGVIZWlnaHQsIDE1MF0pXHJcbiAgICAgICAgYm90dGxlSW5kZXgrK1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBjb250ZXh0ID0gd3guY3JlYXRlQ2FudmFzQ29udGV4dCgnYm90dGxlSW1nJylcclxuICBjb25zdCBib3R0bGVVcmwgPSBcImNsb3VkOi8vZHh6c2JvdHRsZS1pdThjeC42NDc4LWR4enNib3R0bGUtaXU4Y3gtMTMwMTMyNzMxNS9ib3R0bGUucG5nXCJcclxuICB3eC5jbG91ZC5kb3dubG9hZEZpbGUoe1xyXG4gICAgZmlsZUlEOiBib3R0bGVVcmwsXHJcbiAgICBzdWNjZXNzOiByZXMgPT57XHJcbiAgICAgIGRyYXdBbGwoY29udGV4dCwgcmVzLnRlbXBGaWxlUGF0aClcclxuXHJcbiAgICAgIGNvbnRleHQuZHJhdyh0cnVlLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIHd4LmNhbnZhc1RvVGVtcEZpbGVQYXRoKHtcclxuICAgICAgICAgIGNhbnZhc0lkOiBcImJvdHRsZUltZ1wiLFxyXG4gICAgICAgICAgcXVhbGl0eTogMSxcclxuICAgICAgICAgIGRlc3RXaWR0aDogMTMwMCxcclxuICAgICAgICAgIGRlc3RIZWlnaHQ6IDQwMDAsXHJcbiAgICAgICAgICBzdWNjZXNzKHJlcykge1xyXG4gICAgICAgICAgICB3eC5zYXZlSW1hZ2VUb1Bob3Rvc0FsYnVtKHtcclxuICAgICAgICAgICAgICBmaWxlUGF0aDogcmVzLnRlbXBGaWxlUGF0aCxcclxuICAgICAgICAgICAgICBzdWNjZXNzKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLmiJDlip/kv53lrZhcIilcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGZhaWwocmVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMuZXJyTXNnKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG5cclxuXHJcbiAgICB9XHJcbiAgfSlcclxufSJdfQ==
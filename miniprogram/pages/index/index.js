"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var export_1 = require("./export");
var app = getApp();
var URL_PREFIX = "cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/";
var Bottle = (function () {
    function Bottle(content) {
        this.path = URL_PREFIX + content.path;
        this.name = content.name;
        this.full = 0;
    }
    Bottle.prototype.update = function () {
        if (this.full < 5) {
            this.full += 1;
        }
        else {
            this.full = 0;
        }
    };
    return Bottle;
}());
Page({
    data: {
        bottles: [],
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../logs/logs',
        });
    },
    onLoad: function () {
        var _this = this;
        export_1.Export();
        wx.cloud.init();
        var fs = wx.getFileSystemManager();
        wx.cloud.downloadFile({
            fileID: 'cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/bottlelist1.json',
            success: function (res) {
                console.log(res.tempFilePath);
                var contents = JSON.parse(fs.readFileSync(res.tempFilePath, "utf8").toString());
                var bottles = contents.map(function (config) { return new Bottle(config); });
                _this.setData({
                    bottles: bottles
                });
                console.log(_this.data.bottles);
            },
            fail: console.error
        });
    },
    updateBottle: function (event) {
        var bottles = this.data.bottles;
        var id = event.currentTarget.dataset.index;
        bottles[id].update();
        this.setData({
            bottles: bottles
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLG1DQUFpQztBQUVqQyxJQUFNLEdBQUcsR0FBRyxNQUFNLEVBQWMsQ0FBQTtBQUNoQyxJQUFNLFVBQVUsR0FBRyw0REFBNEQsQ0FBQTtBQU8vRTtJQUtFLGdCQUFZLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUE7UUFDckMsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBO0lBQ2YsQ0FBQztJQUVELHVCQUFNLEdBQU47UUFDRSxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFBO1NBQ2Y7YUFFRDtZQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBO1NBQ2Q7SUFDSCxDQUFDO0lBQ0gsYUFBQztBQUFELENBQUMsQUFwQkQsSUFvQkM7QUFFRCxJQUFJLENBQUM7SUFDSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUMsRUFBYztLQUN2QjtJQUVELFdBQVc7UUFDVCxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osR0FBRyxFQUFFLGNBQWM7U0FDcEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELE1BQU0sRUFBTjtRQUFBLGlCQXlCQztRQXhCQyxlQUFNLEVBQUUsQ0FBQTtRQUVSLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDZixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQTtRQUNsQyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztZQUNwQixNQUFNLEVBQUUsNEVBQTRFO1lBQ3BGLE9BQU8sRUFBRSxVQUFBLEdBQUc7Z0JBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7Z0JBQzdCLElBQUksUUFBUSxHQUFvQixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO2dCQUNoRyxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQWxCLENBQWtCLENBQUMsQ0FBQTtnQkFDMUQsS0FBSSxDQUFDLE9BQU8sQ0FBQztvQkFDWCxPQUFPLFNBQUE7aUJBQ1IsQ0FBQyxDQUFBO2dCQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUNoQyxDQUFDO1lBQ0QsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLO1NBQ3BCLENBQUMsQ0FBQTtJQVFKLENBQUM7SUFDRCxZQUFZLFlBQUMsS0FBSztRQUNoQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQUMvQixJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUE7UUFDMUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxPQUFPLFNBQUE7U0FDUixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW5kZXgudHNcclxuLy8g6I635Y+W5bqU55So5a6e5L6LXHJcbmltcG9ydCB7IEV4cG9ydCB9IGZyb20gXCIuL2V4cG9ydFwiXHJcblxyXG5jb25zdCBhcHAgPSBnZXRBcHA8SUFwcE9wdGlvbj4oKVxyXG5jb25zdCBVUkxfUFJFRklYID0gXCJjbG91ZDovL2R4enNib3R0bGUtaXU4Y3guNjQ3OC1keHpzYm90dGxlLWl1OGN4LTEzMDEzMjczMTUvXCJcclxuXHJcbmludGVyZmFjZSBJQm90dGxlQ29uZmlne1xyXG4gIHBhdGg6IHN0cmluZ1xyXG4gIG5hbWU6IHN0cmluZ1xyXG59XHJcblxyXG5jbGFzcyBCb3R0bGUge1xyXG4gIHBhdGg6IHN0cmluZ1xyXG4gIG5hbWU6IHN0cmluZ1xyXG4gIGZ1bGw6IG51bWJlclxyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZW50OiBJQm90dGxlQ29uZmlnKSB7XHJcbiAgICB0aGlzLnBhdGggPSBVUkxfUFJFRklYICsgY29udGVudC5wYXRoXHJcbiAgICB0aGlzLm5hbWUgPSBjb250ZW50Lm5hbWVcclxuICAgIHRoaXMuZnVsbCA9IDBcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLmZ1bGwgPCA1KSB7XHJcbiAgICAgIHRoaXMuZnVsbCArPSAxXHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgIHRoaXMuZnVsbCA9IDBcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblBhZ2Uoe1xyXG4gIGRhdGE6IHtcclxuICAgIGJvdHRsZXM6W10gYXMgQm90dGxlW10sXHJcbiAgfSxcclxuICAvLyDkuovku7blpITnkIblh73mlbBcclxuICBiaW5kVmlld1RhcCgpIHtcclxuICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICB1cmw6ICcuLi9sb2dzL2xvZ3MnLFxyXG4gICAgfSlcclxuICB9LFxyXG4gIG9uTG9hZCgpIHtcclxuICAgIEV4cG9ydCgpXHJcblxyXG4gICAgd3guY2xvdWQuaW5pdCgpXHJcbiAgICB2YXIgZnMgPSB3eC5nZXRGaWxlU3lzdGVtTWFuYWdlcigpXHJcbiAgICB3eC5jbG91ZC5kb3dubG9hZEZpbGUoe1xyXG4gICAgICBmaWxlSUQ6ICdjbG91ZDovL2R4enNib3R0bGUtaXU4Y3guNjQ3OC1keHpzYm90dGxlLWl1OGN4LTEzMDEzMjczMTUvYm90dGxlbGlzdDEuanNvbicsXHJcbiAgICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2cocmVzLnRlbXBGaWxlUGF0aClcclxuICAgICAgICB2YXIgY29udGVudHM6IElCb3R0bGVDb25maWdbXSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHJlcy50ZW1wRmlsZVBhdGgsIFwidXRmOFwiKS50b1N0cmluZygpKVxyXG4gICAgICAgIGNvbnN0IGJvdHRsZXMgPSBjb250ZW50cy5tYXAoY29uZmlnID0+IG5ldyBCb3R0bGUoY29uZmlnKSlcclxuICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgYm90dGxlc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5kYXRhLmJvdHRsZXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIGZhaWw6IGNvbnNvbGUuZXJyb3JcclxuICAgIH0pXHJcbiAgICAvLyB2YXIgYm90dGxlZGF0YSA9IHJlcXVpcmUoJy4uLy4uL2JvdHRsZXMvYm90dGxlcy5qcycpXHJcbiAgICAvLyB2YXIgY29udGVudHM6IElCb3R0bGVDb25maWdbXSA9IGJvdHRsZWRhdGEuYm90dGxlbGlzdFxyXG4gICAgLy8gY29uc3QgYm90dGxlcyA9IGNvbnRlbnRzLm1hcChjb25maWcgPT4gbmV3IEJvdHRsZShjb25maWcpKVxyXG4gICAgLy8gdGhpcy5zZXREYXRhKHtcclxuICAgIC8vICAgYm90dGxlc1xyXG4gICAgLy8gfSlcclxuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZGF0YS5ib3R0bGVzKVxyXG4gIH0sXHJcbiAgdXBkYXRlQm90dGxlKGV2ZW50KXtcclxuICAgIHZhciBib3R0bGVzID0gdGhpcy5kYXRhLmJvdHRsZXNcclxuICAgIHZhciBpZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleFxyXG4gICAgYm90dGxlc1tpZF0udXBkYXRlKClcclxuICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgIGJvdHRsZXNcclxuICAgIH0pXHJcbiAgfSxcclxufSlcclxuIl19
"use strict";
var app = getApp();
var URL_PREFIX = "cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/";
var Bottle = (function () {
    function Bottle(content) {
        this.path = URL_PREFIX + content.path;
        this.name = content.name;
        this.full = 0;
    }
    Bottle.prototype.update = function () {
        if (this.full < 5) {
            this.full += 1;
        }
        else {
            this.full = 0;
        }
    };
    return Bottle;
}());
Page({
    data: {
        bottles: [],
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../logs/logs',
        });
    },
    onLoad: function () {
        var _this = this;
        wx.cloud.init();
        var fs = wx.getFileSystemManager();
        wx.cloud.downloadFile({
            fileID: 'cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/bottlelist1.json',
            success: function (res) {
                console.log(res.tempFilePath);
                var contents = JSON.parse(fs.readFileSync(res.tempFilePath, "utf8").toString());
                var bottles = contents.map(function (config) { return new Bottle(config); });
                _this.setData({
                    bottles: bottles
                });
                console.log(_this.data.bottles);
            },
            fail: console.error
        });
    },
    updateBottle: function (event) {
        var bottles = this.data.bottles;
        var id = event.currentTarget.dataset.index;
        bottles[id].update();
        this.setData({
            bottles: bottles
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsSUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFjLENBQUE7QUFDaEMsSUFBTSxVQUFVLEdBQUcsNERBQTRELENBQUE7QUFPL0U7SUFLRSxnQkFBWSxPQUFzQjtRQUNoQyxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFBO1FBQ3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQTtRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtJQUNmLENBQUM7SUFFRCx1QkFBTSxHQUFOO1FBQ0UsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQTtTQUNmO2FBRUQ7WUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtTQUNkO0lBQ0gsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBcEJELElBb0JDO0FBRUQsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFDLEVBQWM7S0FDdkI7SUFFRCxXQUFXO1FBQ1QsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSxjQUFjO1NBQ3BCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxNQUFNO1FBQU4saUJBdUJDO1FBdEJDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDZixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQTtRQUNsQyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztZQUNwQixNQUFNLEVBQUUsNEVBQTRFO1lBQ3BGLE9BQU8sRUFBRSxVQUFBLEdBQUc7Z0JBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7Z0JBQzdCLElBQUksUUFBUSxHQUFvQixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO2dCQUNoRyxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQWxCLENBQWtCLENBQUMsQ0FBQTtnQkFDMUQsS0FBSSxDQUFDLE9BQU8sQ0FBQztvQkFDWCxPQUFPLFNBQUE7aUJBQ1IsQ0FBQyxDQUFBO2dCQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUNoQyxDQUFDO1lBQ0QsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLO1NBQ3BCLENBQUMsQ0FBQTtJQVFKLENBQUM7SUFDRCxZQUFZLFlBQUMsS0FBSztRQUNoQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQUMvQixJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUE7UUFDMUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxPQUFPLFNBQUE7U0FDUixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW5kZXgudHNcbi8vIOiOt+WPluW6lOeUqOWunuS+i1xuY29uc3QgYXBwID0gZ2V0QXBwPElBcHBPcHRpb24+KClcbmNvbnN0IFVSTF9QUkVGSVggPSBcImNsb3VkOi8vZHh6c2JvdHRsZS1pdThjeC42NDc4LWR4enNib3R0bGUtaXU4Y3gtMTMwMTMyNzMxNS9cIlxuXG5pbnRlcmZhY2UgSUJvdHRsZUNvbmZpZ3tcbiAgcGF0aDogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xufVxuXG5jbGFzcyBCb3R0bGUge1xuICBwYXRoOiBzdHJpbmdcbiAgbmFtZTogc3RyaW5nXG4gIGZ1bGw6IG51bWJlclxuXG4gIGNvbnN0cnVjdG9yKGNvbnRlbnQ6IElCb3R0bGVDb25maWcpIHtcbiAgICB0aGlzLnBhdGggPSBVUkxfUFJFRklYICsgY29udGVudC5wYXRoXG4gICAgdGhpcy5uYW1lID0gY29udGVudC5uYW1lXG4gICAgdGhpcy5mdWxsID0gMFxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLmZ1bGwgPCA1KSB7XG4gICAgICB0aGlzLmZ1bGwgKz0gMVxuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgdGhpcy5mdWxsID0gMFxuICAgIH1cbiAgfVxufVxuXG5QYWdlKHtcbiAgZGF0YToge1xuICAgIGJvdHRsZXM6W10gYXMgQm90dGxlW10sXG4gIH0sXG4gIC8vIOS6i+S7tuWkhOeQhuWHveaVsFxuICBiaW5kVmlld1RhcCgpIHtcbiAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgIHVybDogJy4uL2xvZ3MvbG9ncycsXG4gICAgfSlcbiAgfSxcbiAgb25Mb2FkKCkge1xuICAgIHd4LmNsb3VkLmluaXQoKVxuICAgIHZhciBmcyA9IHd4LmdldEZpbGVTeXN0ZW1NYW5hZ2VyKClcbiAgICB3eC5jbG91ZC5kb3dubG9hZEZpbGUoe1xuICAgICAgZmlsZUlEOiAnY2xvdWQ6Ly9keHpzYm90dGxlLWl1OGN4LjY0NzgtZHh6c2JvdHRsZS1pdThjeC0xMzAxMzI3MzE1L2JvdHRsZWxpc3QxLmpzb24nLFxuICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzLnRlbXBGaWxlUGF0aClcbiAgICAgICAgdmFyIGNvbnRlbnRzOiBJQm90dGxlQ29uZmlnW10gPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhyZXMudGVtcEZpbGVQYXRoLCBcInV0ZjhcIikudG9TdHJpbmcoKSlcbiAgICAgICAgY29uc3QgYm90dGxlcyA9IGNvbnRlbnRzLm1hcChjb25maWcgPT4gbmV3IEJvdHRsZShjb25maWcpKVxuICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgIGJvdHRsZXNcbiAgICAgICAgfSlcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5kYXRhLmJvdHRsZXMpXG4gICAgICB9LFxuICAgICAgZmFpbDogY29uc29sZS5lcnJvclxuICAgIH0pXG4gICAgLy8gdmFyIGJvdHRsZWRhdGEgPSByZXF1aXJlKCcuLi8uLi9ib3R0bGVzL2JvdHRsZXMuanMnKVxuICAgIC8vIHZhciBjb250ZW50czogSUJvdHRsZUNvbmZpZ1tdID0gYm90dGxlZGF0YS5ib3R0bGVsaXN0XG4gICAgLy8gY29uc3QgYm90dGxlcyA9IGNvbnRlbnRzLm1hcChjb25maWcgPT4gbmV3IEJvdHRsZShjb25maWcpKVxuICAgIC8vIHRoaXMuc2V0RGF0YSh7XG4gICAgLy8gICBib3R0bGVzXG4gICAgLy8gfSlcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmRhdGEuYm90dGxlcylcbiAgfSxcbiAgdXBkYXRlQm90dGxlKGV2ZW50KXtcbiAgICB2YXIgYm90dGxlcyA9IHRoaXMuZGF0YS5ib3R0bGVzXG4gICAgdmFyIGlkID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4XG4gICAgYm90dGxlc1tpZF0udXBkYXRlKClcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgYm90dGxlc1xuICAgIH0pXG4gIH0sXG59KVxuIl19
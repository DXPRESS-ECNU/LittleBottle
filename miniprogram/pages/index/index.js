"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var export_1 = require("./export");
var app = getApp();
var URL_PREFIX = "cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/";
var Bottle = (function () {
    function Bottle(content) {
        this.path = URL_PREFIX + "figs/" + content.path;
        this.name = content.name;
        this.full = 0;
    }
    Bottle.prototype.update = function () {
        if (this.full < 5) {
            this.full += 1;
        }
        else {
            this.full = 0;
        }
    };
    return Bottle;
}());
Page({
    data: {
        bottles: [],
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../logs/logs',
        });
    },
    onLoad: function () {
        var _this = this;
        export_1.Export();
        wx.cloud.init();
        var fs = wx.getFileSystemManager();
        wx.cloud.downloadFile({
            fileID: 'cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/bottlelist1.json',
            success: function (res) {
                console.log(res.tempFilePath);
                var contents = JSON.parse(fs.readFileSync(res.tempFilePath, "utf8").toString());
                var bottles = contents.map(function (config) { return new Bottle(config); });
                _this.setData({
                    bottles: bottles
                });
                console.log(_this.data.bottles);
            },
            fail: console.error
        });
    },
    updateBottle: function (event) {
        var bottles = this.data.bottles;
        var id = event.currentTarget.dataset.index;
        bottles[id].update();
        this.setData({
            bottles: bottles
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLG1DQUFpQztBQUVqQyxJQUFNLEdBQUcsR0FBRyxNQUFNLEVBQWMsQ0FBQTtBQUNoQyxJQUFNLFVBQVUsR0FBRyw0REFBNEQsQ0FBQTtBQU8vRTtJQUtFLGdCQUFZLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxHQUFHLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFBO1FBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQTtRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtJQUNmLENBQUM7SUFFRCx1QkFBTSxHQUFOO1FBQ0UsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQTtTQUNmO2FBRUQ7WUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtTQUNkO0lBQ0gsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBcEJELElBb0JDO0FBRUQsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFDLEVBQWM7S0FDdkI7SUFFRCxXQUFXO1FBQ1QsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSxjQUFjO1NBQ3BCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxNQUFNLEVBQU47UUFBQSxpQkEwQkM7UUF4QkMsZUFBTSxFQUFFLENBQUE7UUFFUixFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ2YsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUE7UUFDbEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7WUFDcEIsTUFBTSxFQUFFLDRFQUE0RTtZQUNwRixPQUFPLEVBQUUsVUFBQSxHQUFHO2dCQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO2dCQUM3QixJQUFJLFFBQVEsR0FBb0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtnQkFDaEcsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFsQixDQUFrQixDQUFDLENBQUE7Z0JBQzFELEtBQUksQ0FBQyxPQUFPLENBQUM7b0JBQ1gsT0FBTyxTQUFBO2lCQUNSLENBQUMsQ0FBQTtnQkFDRixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDaEMsQ0FBQztZQUNELElBQUksRUFBRSxPQUFPLENBQUMsS0FBSztTQUNwQixDQUFDLENBQUE7SUFRSixDQUFDO0lBQ0QsWUFBWSxZQUFDLEtBQUs7UUFDaEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUE7UUFDL0IsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFBO1FBQzFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsT0FBTyxTQUFBO1NBQ1IsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGluZGV4LnRzXHJcbi8vIOiOt+WPluW6lOeUqOWunuS+i1xyXG5cclxuaW1wb3J0IHsgRXhwb3J0IH0gZnJvbSBcIi4vZXhwb3J0XCJcclxuXHJcbmNvbnN0IGFwcCA9IGdldEFwcDxJQXBwT3B0aW9uPigpXHJcbmNvbnN0IFVSTF9QUkVGSVggPSBcImNsb3VkOi8vZHh6c2JvdHRsZS1pdThjeC42NDc4LWR4enNib3R0bGUtaXU4Y3gtMTMwMTMyNzMxNS9cIlxyXG5cclxuaW50ZXJmYWNlIElCb3R0bGVDb25maWd7XHJcbiAgcGF0aDogc3RyaW5nXHJcbiAgbmFtZTogc3RyaW5nXHJcbn1cclxuXHJcbmNsYXNzIEJvdHRsZSB7XHJcbiAgcGF0aDogc3RyaW5nXHJcbiAgbmFtZTogc3RyaW5nXHJcbiAgZnVsbDogbnVtYmVyXHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRlbnQ6IElCb3R0bGVDb25maWcpIHtcclxuICAgIHRoaXMucGF0aCA9IFVSTF9QUkVGSVggKyBcImZpZ3MvXCIgKyBjb250ZW50LnBhdGhcclxuICAgIHRoaXMubmFtZSA9IGNvbnRlbnQubmFtZVxyXG4gICAgdGhpcy5mdWxsID0gMFxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgaWYgKHRoaXMuZnVsbCA8IDUpIHtcclxuICAgICAgdGhpcy5mdWxsICs9IDFcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgdGhpcy5mdWxsID0gMFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuUGFnZSh7XHJcbiAgZGF0YToge1xyXG4gICAgYm90dGxlczpbXSBhcyBCb3R0bGVbXSxcclxuICB9LFxyXG4gIC8vIOS6i+S7tuWkhOeQhuWHveaVsFxyXG4gIGJpbmRWaWV3VGFwKCkge1xyXG4gICAgd3gubmF2aWdhdGVUbyh7XHJcbiAgICAgIHVybDogJy4uL2xvZ3MvbG9ncycsXHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgb25Mb2FkKCkge1xyXG4gICAgLy/osIPor5XnlKgs6K6w5b6X5Yig6ZmkXHJcbiAgICBFeHBvcnQoKVxyXG5cclxuICAgIHd4LmNsb3VkLmluaXQoKVxyXG4gICAgdmFyIGZzID0gd3guZ2V0RmlsZVN5c3RlbU1hbmFnZXIoKVxyXG4gICAgd3guY2xvdWQuZG93bmxvYWRGaWxlKHtcclxuICAgICAgZmlsZUlEOiAnY2xvdWQ6Ly9keHpzYm90dGxlLWl1OGN4LjY0NzgtZHh6c2JvdHRsZS1pdThjeC0xMzAxMzI3MzE1L2JvdHRsZWxpc3QxLmpzb24nLFxyXG4gICAgICBzdWNjZXNzOiByZXMgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJlcy50ZW1wRmlsZVBhdGgpXHJcbiAgICAgICAgdmFyIGNvbnRlbnRzOiBJQm90dGxlQ29uZmlnW10gPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhyZXMudGVtcEZpbGVQYXRoLCBcInV0ZjhcIikudG9TdHJpbmcoKSlcclxuICAgICAgICBjb25zdCBib3R0bGVzID0gY29udGVudHMubWFwKGNvbmZpZyA9PiBuZXcgQm90dGxlKGNvbmZpZykpXHJcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgIGJvdHRsZXNcclxuICAgICAgICB9KVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuZGF0YS5ib3R0bGVzKVxyXG4gICAgICB9LFxyXG4gICAgICBmYWlsOiBjb25zb2xlLmVycm9yXHJcbiAgICB9KVxyXG4gICAgLy8gdmFyIGJvdHRsZWRhdGEgPSByZXF1aXJlKCcuLi8uLi9ib3R0bGVzL2JvdHRsZXMuanMnKVxyXG4gICAgLy8gdmFyIGNvbnRlbnRzOiBJQm90dGxlQ29uZmlnW10gPSBib3R0bGVkYXRhLmJvdHRsZWxpc3RcclxuICAgIC8vIGNvbnN0IGJvdHRsZXMgPSBjb250ZW50cy5tYXAoY29uZmlnID0+IG5ldyBCb3R0bGUoY29uZmlnKSlcclxuICAgIC8vIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAvLyAgIGJvdHRsZXNcclxuICAgIC8vIH0pXHJcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmRhdGEuYm90dGxlcylcclxuICB9LFxyXG4gIHVwZGF0ZUJvdHRsZShldmVudCl7XHJcbiAgICB2YXIgYm90dGxlcyA9IHRoaXMuZGF0YS5ib3R0bGVzXHJcbiAgICB2YXIgaWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaW5kZXhcclxuICAgIGJvdHRsZXNbaWRdLnVwZGF0ZSgpXHJcbiAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICBib3R0bGVzXHJcbiAgICB9KVxyXG4gIH0sXHJcbn0pXHJcbiJdfQ==

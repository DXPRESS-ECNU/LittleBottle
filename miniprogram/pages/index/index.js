"use strict";
var app = getApp();
var URL_PREFIX = "cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/";
var Bottle = (function () {
    function Bottle(content) {
        this.path = URL_PREFIX + content.path;
        this.name = content.name;
        this.full = 0;
    }
    Bottle.prototype.update = function () {
        if (this.full < 5) {
            this.full += 1;
        }
        else {
            this.full = 0;
        }
    };
    return Bottle;
}());
Page({
    data: {
        bottles: [],
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../logs/logs',
        });
    },
    onLoad: function () {
        var _this = this;
        wx.cloud.init();
        var fs = wx.getFileSystemManager();
        wx.cloud.downloadFile({
            fileID: 'cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/bottlelist1.json',
            success: function (res) {
                console.log(res.tempFilePath);
                var contents = JSON.parse(fs.readFileSync(res.tempFilePath, "utf8").toString());
                var bottles = contents.map(function (config) { return new Bottle(config); });
                _this.setData({
                    bottles: bottles
                });
                console.log(_this.data.bottles);
            },
            fail: console.error
        });
    },
    updateBottle: function (event) {
        var bottles = this.data.bottles;
        var id = event.currentTarget.dataset.index;
        bottles[id].update();
        this.setData({
            bottles: bottles
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsSUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFjLENBQUE7QUFDaEMsSUFBTSxVQUFVLEdBQUcsNERBQTRELENBQUE7QUFPL0U7SUFLRSxnQkFBWSxPQUFzQjtRQUNoQyxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFBO1FBQ3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQTtRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtJQUNmLENBQUM7SUFFRCx1QkFBTSxHQUFOO1FBQ0UsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQTtTQUNmO2FBRUQ7WUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtTQUNkO0lBQ0gsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBcEJELElBb0JDO0FBRUQsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFDLEVBQUU7S0FDWDtJQUVELFdBQVc7UUFDVCxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osR0FBRyxFQUFFLGNBQWM7U0FDcEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELE1BQU07UUFBTixpQkF1QkM7UUF0QkMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNmLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFBO1FBQ2xDLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO1lBQ3BCLE1BQU0sRUFBRSw0RUFBNEU7WUFDcEYsT0FBTyxFQUFFLFVBQUEsR0FBRztnQkFDVixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtnQkFDN0IsSUFBSSxRQUFRLEdBQW9CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7Z0JBQ2hHLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFBO2dCQUMxRCxLQUFJLENBQUMsT0FBTyxDQUFDO29CQUNYLE9BQU8sU0FBQTtpQkFDUixDQUFDLENBQUE7Z0JBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ2hDLENBQUM7WUFDRCxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUs7U0FDcEIsQ0FBQyxDQUFBO0lBUUosQ0FBQztJQUNELFlBQVksWUFBQyxLQUFLO1FBQ2hCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQy9CLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQTtRQUMxQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLE9BQU8sU0FBQTtTQUNSLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbmRleC50c1xuLy8g6I635Y+W5bqU55So5a6e5L6LXG5jb25zdCBhcHAgPSBnZXRBcHA8SUFwcE9wdGlvbj4oKVxuY29uc3QgVVJMX1BSRUZJWCA9IFwiY2xvdWQ6Ly9keHpzYm90dGxlLWl1OGN4LjY0NzgtZHh6c2JvdHRsZS1pdThjeC0xMzAxMzI3MzE1L1wiXG5cbmludGVyZmFjZSBJQm90dGxlQ29uZmlne1xuICBwYXRoOiBzdHJpbmdcbiAgbmFtZTogc3RyaW5nXG59XG5cbmNsYXNzIEJvdHRsZSB7XG4gIHBhdGg6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgZnVsbDogbnVtYmVyXG5cbiAgY29uc3RydWN0b3IoY29udGVudDogSUJvdHRsZUNvbmZpZykge1xuICAgIHRoaXMucGF0aCA9IFVSTF9QUkVGSVggKyBjb250ZW50LnBhdGhcbiAgICB0aGlzLm5hbWUgPSBjb250ZW50Lm5hbWVcbiAgICB0aGlzLmZ1bGwgPSAwXG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgaWYgKHRoaXMuZnVsbCA8IDUpIHtcbiAgICAgIHRoaXMuZnVsbCArPSAxXG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICB0aGlzLmZ1bGwgPSAwXG4gICAgfVxuICB9XG59XG5cblBhZ2Uoe1xuICBkYXRhOiB7XG4gICAgYm90dGxlczpbXSxcbiAgfSxcbiAgLy8g5LqL5Lu25aSE55CG5Ye95pWwXG4gIGJpbmRWaWV3VGFwKCkge1xuICAgIHd4Lm5hdmlnYXRlVG8oe1xuICAgICAgdXJsOiAnLi4vbG9ncy9sb2dzJyxcbiAgICB9KVxuICB9LFxuICBvbkxvYWQoKSB7XG4gICAgd3guY2xvdWQuaW5pdCgpXG4gICAgdmFyIGZzID0gd3guZ2V0RmlsZVN5c3RlbU1hbmFnZXIoKVxuICAgIHd4LmNsb3VkLmRvd25sb2FkRmlsZSh7XG4gICAgICBmaWxlSUQ6ICdjbG91ZDovL2R4enNib3R0bGUtaXU4Y3guNjQ3OC1keHpzYm90dGxlLWl1OGN4LTEzMDEzMjczMTUvYm90dGxlbGlzdDEuanNvbicsXG4gICAgICBzdWNjZXNzOiByZXMgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMudGVtcEZpbGVQYXRoKVxuICAgICAgICB2YXIgY29udGVudHM6IElCb3R0bGVDb25maWdbXSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHJlcy50ZW1wRmlsZVBhdGgsIFwidXRmOFwiKS50b1N0cmluZygpKVxuICAgICAgICBjb25zdCBib3R0bGVzID0gY29udGVudHMubWFwKGNvbmZpZyA9PiBuZXcgQm90dGxlKGNvbmZpZykpXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgYm90dGxlc1xuICAgICAgICB9KVxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGEuYm90dGxlcylcbiAgICAgIH0sXG4gICAgICBmYWlsOiBjb25zb2xlLmVycm9yXG4gICAgfSlcbiAgICAvLyB2YXIgYm90dGxlZGF0YSA9IHJlcXVpcmUoJy4uLy4uL2JvdHRsZXMvYm90dGxlcy5qcycpXG4gICAgLy8gdmFyIGNvbnRlbnRzOiBJQm90dGxlQ29uZmlnW10gPSBib3R0bGVkYXRhLmJvdHRsZWxpc3RcbiAgICAvLyBjb25zdCBib3R0bGVzID0gY29udGVudHMubWFwKGNvbmZpZyA9PiBuZXcgQm90dGxlKGNvbmZpZykpXG4gICAgLy8gdGhpcy5zZXREYXRhKHtcbiAgICAvLyAgIGJvdHRsZXNcbiAgICAvLyB9KVxuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZGF0YS5ib3R0bGVzKVxuICB9LFxuICB1cGRhdGVCb3R0bGUoZXZlbnQpe1xuICAgIHZhciBib3R0bGVzID0gdGhpcy5kYXRhLmJvdHRsZXNcbiAgICB2YXIgaWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaW5kZXhcbiAgICBib3R0bGVzW2lkXS51cGRhdGUoKVxuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBib3R0bGVzXG4gICAgfSlcbiAgfSxcbn0pXG4iXX0=

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var export_1 = require("./export");
var app = getApp();
var URL_PREFIX = "cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/";
var Bottle = (function () {
    function Bottle(content) {
        this.path = URL_PREFIX + "figs/" + content.path;
        this.name = content.name;
        this.full = 0;
    }
    Bottle.prototype.update = function () {
        if (this.full < 5) {
            this.full += 1;
        }
        else {
            this.full = 0;
        }
    };
    return Bottle;
}());
Page({
    data: {
        bottles: [],
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../logs/logs',
        });
    },
    onLoad: function () {
        var _this = this;
        export_1.Export();
        wx.cloud.init();
        var fs = wx.getFileSystemManager();
        wx.cloud.downloadFile({
            fileID: 'cloud://dxzsbottle-iu8cx.6478-dxzsbottle-iu8cx-1301327315/bottlelist1.json',
            success: function (res) {
                console.log(res.tempFilePath);
                var contents = JSON.parse(fs.readFileSync(res.tempFilePath, "utf8").toString());
                var bottles = contents.map(function (config) { return new Bottle(config); });
                _this.setData({
                    bottles: bottles
                });
                console.log(_this.data.bottles);
            },
            fail: console.error
        });
    },
    updateBottle: function (event) {
        var bottles = this.data.bottles;
        var id = event.currentTarget.dataset.index;
        bottles[id].update();
        this.setData({
            bottles: bottles
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLG1DQUFpQztBQUVqQyxJQUFNLEdBQUcsR0FBRyxNQUFNLEVBQWMsQ0FBQTtBQUNoQyxJQUFNLFVBQVUsR0FBRyw0REFBNEQsQ0FBQTtBQU8vRTtJQUtFLGdCQUFZLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxHQUFHLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFBO1FBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQTtRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtJQUNmLENBQUM7SUFFRCx1QkFBTSxHQUFOO1FBQ0UsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQTtTQUNmO2FBRUQ7WUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtTQUNkO0lBQ0gsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBcEJELElBb0JDO0FBRUQsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFDLEVBQWM7S0FDdkI7SUFFRCxXQUFXO1FBQ1QsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSxjQUFjO1NBQ3BCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxNQUFNLEVBQU47UUFBQSxpQkEyQkM7UUF6QkMsZUFBTSxFQUFFLENBQUE7UUFFUixFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ2YsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUE7UUFDbEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7WUFDcEIsTUFBTSxFQUFFLDRFQUE0RTtZQUNwRixPQUFPLEVBQUUsVUFBQSxHQUFHO2dCQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO2dCQUM3QixJQUFJLFFBQVEsR0FBb0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtnQkFDaEcsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFsQixDQUFrQixDQUFDLENBQUE7Z0JBQzFELEtBQUksQ0FBQyxPQUFPLENBQUM7b0JBQ1gsT0FBTyxTQUFBO2lCQUNSLENBQUMsQ0FBQTtnQkFDRixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7WUFFaEMsQ0FBQztZQUNELElBQUksRUFBRSxPQUFPLENBQUMsS0FBSztTQUNwQixDQUFDLENBQUE7SUFRSixDQUFDO0lBQ0QsWUFBWSxFQUFaLFVBQWEsS0FBUztRQUNwQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQUMvQixJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUE7UUFDMUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxPQUFPLFNBQUE7U0FDUixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW5kZXgudHNcclxuLy8g6I635Y+W5bqU55So5a6e5L6LXHJcblxyXG5pbXBvcnQgeyBFeHBvcnQgfSBmcm9tIFwiLi9leHBvcnRcIlxyXG5cclxuY29uc3QgYXBwID0gZ2V0QXBwPElBcHBPcHRpb24+KClcclxuY29uc3QgVVJMX1BSRUZJWCA9IFwiY2xvdWQ6Ly9keHpzYm90dGxlLWl1OGN4LjY0NzgtZHh6c2JvdHRsZS1pdThjeC0xMzAxMzI3MzE1L1wiXHJcblxyXG5pbnRlcmZhY2UgSUJvdHRsZUNvbmZpZ3tcclxuICBwYXRoOiBzdHJpbmdcclxuICBuYW1lOiBzdHJpbmdcclxufVxyXG5cclxuY2xhc3MgQm90dGxlIHtcclxuICBwYXRoOiBzdHJpbmdcclxuICBuYW1lOiBzdHJpbmdcclxuICBmdWxsOiBudW1iZXJcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGVudDogSUJvdHRsZUNvbmZpZykge1xyXG4gICAgdGhpcy5wYXRoID0gVVJMX1BSRUZJWCArIFwiZmlncy9cIiArIGNvbnRlbnQucGF0aFxyXG4gICAgdGhpcy5uYW1lID0gY29udGVudC5uYW1lXHJcbiAgICB0aGlzLmZ1bGwgPSAwXHJcbiAgfVxyXG5cclxuICB1cGRhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5mdWxsIDwgNSkge1xyXG4gICAgICB0aGlzLmZ1bGwgKz0gMVxyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICB0aGlzLmZ1bGwgPSAwXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5QYWdlKHtcclxuICBkYXRhOiB7XHJcbiAgICBib3R0bGVzOltdIGFzIEJvdHRsZVtdLFxyXG4gIH0sXHJcbiAgLy8g5LqL5Lu25aSE55CG5Ye95pWwXHJcbiAgYmluZFZpZXdUYXAoKSB7XHJcbiAgICB3eC5uYXZpZ2F0ZVRvKHtcclxuICAgICAgdXJsOiAnLi4vbG9ncy9sb2dzJyxcclxuICAgIH0pXHJcbiAgfSxcclxuICBvbkxvYWQoKSB7XHJcbiAgICAvL+iwg+ivleeUqCzorrDlvpfliKDpmaRcclxuICAgIEV4cG9ydCgpXHJcblxyXG4gICAgd3guY2xvdWQuaW5pdCgpXHJcbiAgICB2YXIgZnMgPSB3eC5nZXRGaWxlU3lzdGVtTWFuYWdlcigpXHJcbiAgICB3eC5jbG91ZC5kb3dubG9hZEZpbGUoe1xyXG4gICAgICBmaWxlSUQ6ICdjbG91ZDovL2R4enNib3R0bGUtaXU4Y3guNjQ3OC1keHpzYm90dGxlLWl1OGN4LTEzMDEzMjczMTUvYm90dGxlbGlzdDEuanNvbicsXHJcbiAgICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2cocmVzLnRlbXBGaWxlUGF0aClcclxuICAgICAgICB2YXIgY29udGVudHM6IElCb3R0bGVDb25maWdbXSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHJlcy50ZW1wRmlsZVBhdGgsIFwidXRmOFwiKS50b1N0cmluZygpKVxyXG4gICAgICAgIGNvbnN0IGJvdHRsZXMgPSBjb250ZW50cy5tYXAoY29uZmlnID0+IG5ldyBCb3R0bGUoY29uZmlnKSlcclxuICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgYm90dGxlc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5kYXRhLmJvdHRsZXMpXHJcblxyXG4gICAgICB9LFxyXG4gICAgICBmYWlsOiBjb25zb2xlLmVycm9yXHJcbiAgICB9KVxyXG4gICAgLy8gdmFyIGJvdHRsZWRhdGEgPSByZXF1aXJlKCcuLi8uLi9ib3R0bGVzL2JvdHRsZXMuanMnKVxyXG4gICAgLy8gdmFyIGNvbnRlbnRzOiBJQm90dGxlQ29uZmlnW10gPSBib3R0bGVkYXRhLmJvdHRsZWxpc3RcclxuICAgIC8vIGNvbnN0IGJvdHRsZXMgPSBjb250ZW50cy5tYXAoY29uZmlnID0+IG5ldyBCb3R0bGUoY29uZmlnKSlcclxuICAgIC8vIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAvLyAgIGJvdHRsZXNcclxuICAgIC8vIH0pXHJcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmRhdGEuYm90dGxlcylcclxuICB9LFxyXG4gIHVwZGF0ZUJvdHRsZShldmVudDphbnkpe1xyXG4gICAgdmFyIGJvdHRsZXMgPSB0aGlzLmRhdGEuYm90dGxlc1xyXG4gICAgdmFyIGlkID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4XHJcbiAgICBib3R0bGVzW2lkXS51cGRhdGUoKVxyXG4gICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgYm90dGxlc1xyXG4gICAgfSlcclxuICB9LFxyXG59KVxyXG4iXX0=